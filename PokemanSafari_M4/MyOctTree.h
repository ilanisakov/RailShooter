/////////////////////////////////////////////////////////////////////
// File: MyOctTree.h
// DSA2 PokemanSafari_M4
// Authors:
//      Ilan Isakov
//		Marty Kurtz
//		Mary Spencer
//
// Description:
//
/////////////////////////////////////////////////////////////////////

#ifndef __MYOCTTREE_H__
#define __MYOCTTREE_H__

#include "MyBOClass.h"

#define OCT_SIZE      8
#define OCT_MAX_DEPTH 5

class MyOctTree {

private:
	MeshManagerSingleton* m_pMeshMngr = nullptr;

	MyOctTree* m_parent = nullptr;     //Node parent
	MyOctTree* m_child[OCT_SIZE];      //Children Nodes

	int m_subdivisions;              //Subdivisions from this cell
	float m_radius;                  //radius of cell
	vector3 m_center;                //center of cell

	std::map<String, MyBOClass*> m_octMap; //oct cell occupants
	typedef std::map<String, MyBOClass*>::iterator t_octMapIt;

	MyOctTree* m_ancestorList[OCT_MAX_DEPTH+1];  //ancestor list (collision traversal)
	int m_ancesterDepth;                         // depth of traversal
	std::vector<std::vector<int>>* m_IdxList;    // ref to report collisions

	/////////////////////////////////////////////////////////////////
	// Init() - initialize class data members
	/////////////////////////////////////////////////////////////////
	void Init();

	/////////////////////////////////////////////////////////////////
	// Swap() - swaps class data members
	/////////////////////////////////////////////////////////////////
	void Swap(MyOctTree& other);

	/////////////////////////////////////////////////////////////////
	// Subdivide() - subdivide the octtree until at tree base
	/////////////////////////////////////////////////////////////////
	void Subdivide();

	/////////////////////////////////////////////////////////////////
	// CalcChildCenter() - calculate the center of a child oct
	//
	// @param - which child it is (0 - 7)
	/////////////////////////////////////////////////////////////////
	vector3 CalcChildCenter(int idx);

	/////////////////////////////////////////////////////////////////
	// DetermineOctant() - dtermines what octant a point is in
	/////////////////////////////////////////////////////////////////
	int DetermineOctant(vector3 point);

	/////////////////////////////////////////////////////////////////
	// RemoveObject() - removes a BO from the tree
	//
	// @param
	//    node - current oct to search in
	//    obj - object reference to remove
	// @return - whether successful
	/////////////////////////////////////////////////////////////////
	bool RemoveObject(MyOctTree* node, MyBOClass* obj);

	/////////////////////////////////////////////////////////////////
	// TraverseAux() - recursive travsal collision method
	//
	// @param - current oct node
	/////////////////////////////////////////////////////////////////
	void TraverseAux(MyOctTree* node);

public:

	/////////////////////////////////////////////////////////////////
	// Constructor
	// @param
	//    center - center of the oct tree
	//    depth  - depth of tree from this oct
	//    width - width of the oct
	/////////////////////////////////////////////////////////////////
	MyOctTree( vector3 center, int depth, float width);

	/////////////////////////////////////////////////////////////////
	// Copy Constructor
	/////////////////////////////////////////////////////////////////
	MyOctTree(MyOctTree const& other);

	/////////////////////////////////////////////////////////////////
	// Copy Assignment Operator
	/////////////////////////////////////////////////////////////////
	MyOctTree& operator=(MyOctTree const& other);

	/////////////////////////////////////////////////////////////////
	// DisplayBox() - display box of octant and suboctants
	/////////////////////////////////////////////////////////////////
	void DisplayBox();

	/////////////////////////////////////////////////////////////////
	// AddObject() - adds an object into the octtree
	//
	// @param
	//    obj - object reference to add
	//    tree - current tree in traversal
	/////////////////////////////////////////////////////////////////
	void AddObject(MyOctTree* tree, MyBOClass* obj);

	/////////////////////////////////////////////////////////////////
	// UpdateObject() - removes and readds an obj from the octtree
	//
	// @param
	//    root - base of tree to update in
	//    obj - object reference to update
	/////////////////////////////////////////////////////////////////
	void UpdateObject(MyOctTree* root, MyBOClass* obj);

	/////////////////////////////////////////////////////////////////
	// CollisionTraverse() - check collisions of all BOs in octtree
	//
	// @param - ref to coliding report lost
	/////////////////////////////////////////////////////////////////
	void CollisionTraverse(std::vector<std::vector<int>>* idxList);

	/////////////////////////////////////////////////////////////////
	// GetCenter() - returns the center of the octant cell
	/////////////////////////////////////////////////////////////////
	vector3 GetCenter();

	/////////////////////////////////////////////////////////////////
	// GetSize() - returns the size of the octant cell
	/////////////////////////////////////////////////////////////////
	float GetSize();

	/////////////////////////////////////////////////////////////////
	// Release() - deallocate any memory recursively
	/////////////////////////////////////////////////////////////////
	void Release(MyOctTree* node);

	/////////////////////////////////////////////////////////////////
	// Destructor()
	/////////////////////////////////////////////////////////////////
	~MyOctTree();
};




#endif /*__MYOCTTREE_H__*/
