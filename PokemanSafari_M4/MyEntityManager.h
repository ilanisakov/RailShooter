/////////////////////////////////////////////////////////////////////
// File: MyEntityManager.h
// DSA2 PokemanSafari_M4
// Authors:
//      Ilan Isakov
//		Marty Kurtz
//		Mary Spencer
//
// Description: Modified Entity Manager Singleton Class
//
/////////////////////////////////////////////////////////////////////

#ifndef _ENTITYMANAGER_H_
#define _ENTITYMANAGER_H_

//Includes
#include "MyEntityClass.h"

class MyEntityManager {

private:
	static MyEntityManager* m_pInstance;   //sigleton instance

	uint m_nEntityCount = 0;               //# entities in list
	std::vector<MyEntityClass*> m_lEntity; //list of entities

	std::map<String, uint> entMap;         //map of list index

	MyBOManager* m_pBOMngr;

	
	/////////////////////////////////////////////////////////////////
	// Constructor
	/////////////////////////////////////////////////////////////////
	MyEntityManager();

	/////////////////////////////////////////////////////////////////
	// Copy Constructor
	/////////////////////////////////////////////////////////////////
	MyEntityManager(MyEntityManager const& other);

	/////////////////////////////////////////////////////////////////
	// Copy Assignment Operator
	/////////////////////////////////////////////////////////////////
	MyEntityManager& operator=(MyEntityManager const& other);

	/////////////////////////////////////////////////////////////////
	// Destructor
	/////////////////////////////////////////////////////////////////
	~MyEntityManager();

	/////////////////////////////////////////////////////////////////
	// Init - intializes object and its members
	/////////////////////////////////////////////////////////////////
	void Init();

	/////////////////////////////////////////////////////////////////
	// Release()  - release the objects memory
	/////////////////////////////////////////////////////////////////
	void Release();


public:
	/////////////////////////////////////////////////////////////////
	// GetInstance() - gets the static instance of manager
	/////////////////////////////////////////////////////////////////
	static MyEntityManager* GetInstance();

	/////////////////////////////////////////////////////////////////
	// ReleaseInstance() 0 release the static class pointer
	/////////////////////////////////////////////////////////////////
	static void ReleaseInstance();

	/////////////////////////////////////////////////////////////////
    //AddEntity() - adds projectile entity
	//
	// @param
	//    name - entity name
	//    type - entity type
	// @return -  success
	/////////////////////////////////////////////////////////////////
	int AddEntity(String name, ET_TYPE type);

	/////////////////////////////////////////////////////////////////
	// AddEntity() - adds path following entity
	//
	// @param
	//    name - entity name
	//    type - entity type
	//    time - entity path lap time
	//    movementPath - predetermined entity path
	// @return - success
	/////////////////////////////////////////////////////////////////
	int AddEntity(String name, ET_TYPE type,
		float time, std::vector<vector3> movementPath);

	/////////////////////////////////////////////////////////////////
	// AddEntity() -  environmental obj entity
	//
	// @param
	//    name - entity name
	//    type - entity type
	//    verts - list of entity verts
	// @return - success
	/////////////////////////////////////////////////////////////////
	int AddEntity(String name, ET_TYPE type, std::vector<vector3> verts);

	/////////////////////////////////////////////////////////////////
	// AddEntity - Adds already created entity
	//
	// @param
	//   entity - entity ref
	//   name - entity name
	// @return - success
	/////////////////////////////////////////////////////////////////
	int AddEntity(MyEntityClass* entity, String name);

	/////////////////////////////////////////////////////////////////
	// GetEntity() - returns refernce to an entity
	//
	// @param - name of the entity
	// @return - reference to entity
	/////////////////////////////////////////////////////////////////
	MyEntityClass* GetEntity(String name);

	/////////////////////////////////////////////////////////////////
	// GetIndex() - return the list index of named entity
	/////////////////////////////////////////////////////////////////
	int GetIndex(String name);

	/////////////////////////////////////////////////////////////////
	// GetEntityCount() - returns the # of entities in manager
	/////////////////////////////////////////////////////////////////
	int GetEntityCount();

	/////////////////////////////////////////////////////////////////
	// SetRenderGeometry() - sets whether to display entity collision
	//                       boxes
	/////////////////////////////////////////////////////////////////
	void SetRenderGeometry(bool display);

	/////////////////////////////////////////////////////////////////
	// processCollisions() - processes collision responces for given
	//                       entity name or ALL
	/////////////////////////////////////////////////////////////////
	void processCollisions(String name);

	/////////////////////////////////////////////////////////////////
	// processCollisions() - process collisions of entity of given id
	/////////////////////////////////////////////////////////////////
	void processCollisions(int idx);

	/////////////////////////////////////////////////////////////////
	//Update() - update manager and all of its entities
	/////////////////////////////////////////////////////////////////
	void Update();

	
};































#endif /*_ENTITYMANAGER_H_*/


