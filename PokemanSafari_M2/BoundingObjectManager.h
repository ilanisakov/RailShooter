/////////////////////////////////////////////////////////////////////
// File: BoundingObjectManager.h
// DSA2 A10_BoundingObjectManager
// Authors:
//      Ilan Isakov
//		Marty Kurtz
//		Mary Spencer
//
// Description:
//
/////////////////////////////////////////////////////////////////////

#ifndef _BOUNDINGOBJECTMANAGER_H_
#define _BOUNDINGOBJECTMANAGER_H_

#include "RE\ReEng.h"
#include "MyBoundingObjectClass.h"

#include "Character.h"
#include "Projectile.h"

class BoundingObjectManager
{
private:
	static BoundingObjectManager* inst;  //Singleton Manager Instance

//	MeshManagerSingleton* m_pMeshMngr;

	std::map<String, MyBoundingObjectClass*> objMap;

	typedef std::map<String, MyBoundingObjectClass*>::iterator objMapIt;
	typedef std::pair<String, MyBoundingObjectClass*> objMapPair;

//*******************************************************************
//*******************************************************************
	std::map<String, Character*> charMap;
	std::map<String, Projectile*> projMap;

	typedef std::map<String, Character*>::iterator charMapIt;
	typedef std::pair<String, Character*> charMapPair;

	typedef std::map<String, Projectile*>::iterator projMapIt;
	typedef std::pair<String, Projectile*> projMapPair;


	/////////////////////////////////////////////////////////////////
	//  BoundingObjectManager() - Private singleton constructor
	/////////////////////////////////////////////////////////////////
	BoundingObjectManager();

	
public:

	/////////////////////////////////////////////////////////////////
	// GetInstance() - return the singleton inst of BO manager
	/////////////////////////////////////////////////////////////////
	static BoundingObjectManager* GetInstance();

	/////////////////////////////////////////////////////////////////
	// ReleaseInst() - Release the BO manager singleton instance
	/////////////////////////////////////////////////////////////////
	static void ReleaseInst();

	/////////////////////////////////////////////////////////////////
	// ~BoundingObjectManager()
	/////////////////////////////////////////////////////////////////
	~BoundingObjectManager();

	/////////////////////////////////////////////////////////////////
	// AddBox - names must be unique
	//    name - unique key for BO
	//    VectorList - vertices to generate BOClass
	/////////////////////////////////////////////////////////////////
	int AddBox(String name, std::vector<vector3> VectorList);

	/////////////////////////////////////////////////////////////////
	// SetAABBVisible 
	//   visible - whether spehere/axis re-aligned is visible for ALL
	/////////////////////////////////////////////////////////////////
	void SetAABBVisible(bool visible);
	bool aabbVisible = true;

	/////////////////////////////////////////////////////////////////
	// GetNumberBO() - return number of BO objs in manager
	/////////////////////////////////////////////////////////////////
	int GetNumberBO();

	/////////////////////////////////////////////////////////////////
	// SetModelMatrix
	//    name - unique key for BO
	//    mToWorld matrix
	/////////////////////////////////////////////////////////////////
	void SetModelMatrix(String name, matrix4 mToWorld);

	/////////////////////////////////////////////////////////////////
	// SetBOColor()
	//    name - unique key for BO
	//    v3Color - color of BO box/sphere
	/////////////////////////////////////////////////////////////////
	void SetBOColor(String name, vector3 v3color);

	/////////////////////////////////////////////////////////////////
	// SetBOVisibile
	//    name - unique key for BO
	//    visible - whether all BO shapes are visible
	/////////////////////////////////////////////////////////////////
	void SetBOVisible(String name, bool visible);
	bool boVisible = true;

	/////////////////////////////////////////////////////////////////
	// UpdateRenderList
	//    name - unique key for BO
	//         - "ALL" special case to render all BOs
	/////////////////////////////////////////////////////////////////
	void UpdateRenderList(String name);

	/////////////////////////////////////////////////////////////////
	// CheckCollision - checks collosions with all BOs
	/////////////////////////////////////////////////////////////////
	void CheckCollision();



//*******************************************************************
//New code....
//*******************************************************************

	/////////////////////////////////////////////////////////////////
	// UpdateCharacterRenderList()
	/////////////////////////////////////////////////////////////////
	void UpdateCharacterRenderList(String name);

	/////////////////////////////////////////////////////////////////
	// UpdateProjectileRenderList()
	/////////////////////////////////////////////////////////////////
	void UpdateProjectileRenderList(String name);


	/////////////////////////////////////////////////////////////////
	// CheckCollisions - checks collosions with all Char/Proj
	/////////////////////////////////////////////////////////////////
	void CheckCollisions();

	/////////////////////////////////////////////////////////////////
	// AddCharacter
	/////////////////////////////////////////////////////////////////
	int AddCharacter(String name, Character* c);

	/////////////////////////////////////////////////////////////////
	// AddProjectile
	/////////////////////////////////////////////////////////////////
	int AddProjectile(String name, Projectile* p);

};



#endif /*_BOUNDINGOBJECTMANAGER_H_*/