/////////////////////////////////////////////////////////////////////
// File: ScoreManager.cpp
// DSA2 PokemanSafari_M1
// Authors:
//      Ilan Isakov
//		Marty Kurtz
//		Mary Spencer
//
// Description:
//
/////////////////////////////////////////////////////////////////////

#include "ScoreManager.h"

ScoreManager* ScoreManager::inst = nullptr;

/////////////////////////////////////////////////////////////////////
//  ScoreManager() - Private singleton constructor
/////////////////////////////////////////////////////////////////////
ScoreManager::ScoreManager()
{
	scoreCount = 0;
	m_pMeshMngr = MeshManagerSingleton::GetInstance();
}

/////////////////////////////////////////////////////////////////////
// GetInstance() - return the singleton inst of BO manager
/////////////////////////////////////////////////////////////////////
ScoreManager* ScoreManager::GetInstance()
{
	if (inst == nullptr)
	{
		inst = new ScoreManager();
	}
	return inst;
}

/////////////////////////////////////////////////////////////////////
// ReleaseInst() - Release the Score manager singleton instance
/////////////////////////////////////////////////////////////////////
void ScoreManager::ReleaseInst()
{
	if (inst != nullptr)
	{
		delete inst;
		inst = nullptr;
	}
}

/////////////////////////////////////////////////////////////////////
// ~ScoreManager()
/////////////////////////////////////////////////////////////////////
ScoreManager::~ScoreManager()
{
	ReleaseInst();
}

/////////////////////////////////////////////////////////////////////
// GetScore()
/////////////////////////////////////////////////////////////////////
int ScoreManager::GetScore()
{
	return scoreCount;
}

/////////////////////////////////////////////////////////////////////
// GetReport()
/////////////////////////////////////////////////////////////////////
void ScoreManager::GetReport()
{
	//render verbose stats of #of pokeman to screen/console
}

void ScoreManager::Update()
{
	char buff[10];
	sprintf(buff, "Score: %d", scoreCount);
	m_pMeshMngr->PrintLine(buff, REYELLOW);
}

/////////////////////////////////////////////////////////////////////
// Increment()
/////////////////////////////////////////////////////////////////////
void ScoreManager::Increment()
{
	scoreCount++;
}

/////////////////////////////////////////////////////////////////////
// CaughtPokeman()
/////////////////////////////////////////////////////////////////////
//void ScoreManager::CaughtPokeman(Character* c)
//{
//	//make a score object?
//	//update based on character stats
//}

/////////////////////////////////////////////////////////////////////
// HitSpaceship()
/////////////////////////////////////////////////////////////////////
//void ScoreManager::HitSpaceship(Character *c)
//{
//	//increment score
//	//decrement damage on ship?
//	//if 0 destory it?
//}

/////////////////////////////////////////////////////////////////////
// NetAttack()
/////////////////////////////////////////////////////////////////////
void ScoreManager::NetAttack()
{
	//randomly remove a score object(for a pokeman)
}






